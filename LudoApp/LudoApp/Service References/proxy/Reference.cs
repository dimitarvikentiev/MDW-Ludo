//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LudoApp.proxy {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/LudoService")]
    [System.SerializableAttribute()]
    public partial class Player : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NbOfPawnsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NbOfPointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LudoApp.proxy.Pawn[] pawnsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NbOfPawns {
            get {
                return this.NbOfPawnsField;
            }
            set {
                if ((this.NbOfPawnsField.Equals(value) != true)) {
                    this.NbOfPawnsField = value;
                    this.RaisePropertyChanged("NbOfPawns");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NbOfPoints {
            get {
                return this.NbOfPointsField;
            }
            set {
                if ((this.NbOfPointsField.Equals(value) != true)) {
                    this.NbOfPointsField = value;
                    this.RaisePropertyChanged("NbOfPoints");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Position {
            get {
                return this.PositionField;
            }
            set {
                if ((this.PositionField.Equals(value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Priority {
            get {
                return this.PriorityField;
            }
            set {
                if ((this.PriorityField.Equals(value) != true)) {
                    this.PriorityField = value;
                    this.RaisePropertyChanged("Priority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LudoApp.proxy.Pawn[] pawns {
            get {
                return this.pawnsField;
            }
            set {
                if ((object.ReferenceEquals(this.pawnsField, value) != true)) {
                    this.pawnsField = value;
                    this.RaisePropertyChanged("pawns");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Pawn", Namespace="http://schemas.datacontract.org/2004/07/LudoService")]
    [System.SerializableAttribute()]
    public partial class Pawn : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool AllFinishField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private LudoApp.proxy.Player AttachedPlayerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EndPositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FinishedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Drawing.Point InitialLocationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Drawing.Color PawnColorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int PawnIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StartPositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int currentPositionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string getColorStringField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool AllFinish {
            get {
                return this.AllFinishField;
            }
            set {
                if ((this.AllFinishField.Equals(value) != true)) {
                    this.AllFinishField = value;
                    this.RaisePropertyChanged("AllFinish");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public LudoApp.proxy.Player AttachedPlayer {
            get {
                return this.AttachedPlayerField;
            }
            set {
                if ((object.ReferenceEquals(this.AttachedPlayerField, value) != true)) {
                    this.AttachedPlayerField = value;
                    this.RaisePropertyChanged("AttachedPlayer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EndPosition {
            get {
                return this.EndPositionField;
            }
            set {
                if ((this.EndPositionField.Equals(value) != true)) {
                    this.EndPositionField = value;
                    this.RaisePropertyChanged("EndPosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Finished {
            get {
                return this.FinishedField;
            }
            set {
                if ((this.FinishedField.Equals(value) != true)) {
                    this.FinishedField = value;
                    this.RaisePropertyChanged("Finished");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Drawing.Point InitialLocation {
            get {
                return this.InitialLocationField;
            }
            set {
                if ((this.InitialLocationField.Equals(value) != true)) {
                    this.InitialLocationField = value;
                    this.RaisePropertyChanged("InitialLocation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Drawing.Color PawnColor {
            get {
                return this.PawnColorField;
            }
            set {
                if ((this.PawnColorField.Equals(value) != true)) {
                    this.PawnColorField = value;
                    this.RaisePropertyChanged("PawnColor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int PawnID {
            get {
                return this.PawnIDField;
            }
            set {
                if ((this.PawnIDField.Equals(value) != true)) {
                    this.PawnIDField = value;
                    this.RaisePropertyChanged("PawnID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StartPosition {
            get {
                return this.StartPositionField;
            }
            set {
                if ((this.StartPositionField.Equals(value) != true)) {
                    this.StartPositionField = value;
                    this.RaisePropertyChanged("StartPosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int currentPosition {
            get {
                return this.currentPositionField;
            }
            set {
                if ((this.currentPositionField.Equals(value) != true)) {
                    this.currentPositionField = value;
                    this.RaisePropertyChanged("currentPosition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string getColorString {
            get {
                return this.getColorStringField;
            }
            set {
                if ((object.ReferenceEquals(this.getColorStringField, value) != true)) {
                    this.getColorStringField = value;
                    this.RaisePropertyChanged("getColorString");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="proxy.IGame", CallbackContract=typeof(LudoApp.proxy.IGameCallback))]
    public interface IGame {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Connect", ReplyAction="http://tempuri.org/IGame/ConnectResponse")]
        LudoApp.proxy.Player[] Connect(string username, int nbOfPoints, int Position, int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/Connect", ReplyAction="http://tempuri.org/IGame/ConnectResponse")]
        System.Threading.Tasks.Task<LudoApp.proxy.Player[]> ConnectAsync(string username, int nbOfPoints, int Position, int priority);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/Disconnect")]
        void Disconnect();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/Disconnect")]
        System.Threading.Tasks.Task DisconnectAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/CreatePlayer", ReplyAction="http://tempuri.org/IGame/CreatePlayerResponse")]
        void CreatePlayer(string username, int nbOfPoints, int position, int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/CreatePlayer", ReplyAction="http://tempuri.org/IGame/CreatePlayerResponse")]
        System.Threading.Tasks.Task CreatePlayerAsync(string username, int nbOfPoints, int position, int priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/RemovePlayer", ReplyAction="http://tempuri.org/IGame/RemovePlayerResponse")]
        void RemovePlayer(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/RemovePlayer", ReplyAction="http://tempuri.org/IGame/RemovePlayerResponse")]
        System.Threading.Tasks.Task RemovePlayerAsync(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/GetPlayers", ReplyAction="http://tempuri.org/IGame/GetPlayersResponse")]
        LudoApp.proxy.Player[] GetPlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/GetPlayers", ReplyAction="http://tempuri.org/IGame/GetPlayersResponse")]
        System.Threading.Tasks.Task<LudoApp.proxy.Player[]> GetPlayersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/GetPlayerInfo", ReplyAction="http://tempuri.org/IGame/GetPlayerInfoResponse")]
        string GetPlayerInfo(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/GetPlayerInfo", ReplyAction="http://tempuri.org/IGame/GetPlayerInfoResponse")]
        System.Threading.Tasks.Task<string> GetPlayerInfoAsync(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/ThrowDice", ReplyAction="http://tempuri.org/IGame/ThrowDiceResponse")]
        int ThrowDice(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/ThrowDice", ReplyAction="http://tempuri.org/IGame/ThrowDiceResponse")]
        System.Threading.Tasks.Task<int> ThrowDiceAsync(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/MoveForward", ReplyAction="http://tempuri.org/IGame/MoveForwardResponse")]
        void MoveForward(LudoApp.proxy.Pawn p, int newPosition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/MoveForward", ReplyAction="http://tempuri.org/IGame/MoveForwardResponse")]
        System.Threading.Tasks.Task MoveForwardAsync(LudoApp.proxy.Pawn p, int newPosition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/SendMessage", ReplyAction="http://tempuri.org/IGame/SendMessageResponse")]
        void SendMessage(string msg, string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/SendMessage", ReplyAction="http://tempuri.org/IGame/SendMessageResponse")]
        System.Threading.Tasks.Task SendMessageAsync(string msg, string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/GamePause", ReplyAction="http://tempuri.org/IGame/GamePauseResponse")]
        void GamePause(bool b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/GamePause", ReplyAction="http://tempuri.org/IGame/GamePauseResponse")]
        System.Threading.Tasks.Task GamePauseAsync(bool b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/ResetPawn", ReplyAction="http://tempuri.org/IGame/ResetPawnResponse")]
        void ResetPawn(LudoApp.proxy.Pawn p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/ResetPawn", ReplyAction="http://tempuri.org/IGame/ResetPawnResponse")]
        System.Threading.Tasks.Task ResetPawnAsync(LudoApp.proxy.Pawn p);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/AllFinish", ReplyAction="http://tempuri.org/IGame/AllFinishResponse")]
        bool AllFinish(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/AllFinish", ReplyAction="http://tempuri.org/IGame/AllFinishResponse")]
        System.Threading.Tasks.Task<bool> AllFinishAsync(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/PawnHasFinish")]
        void PawnHasFinish(LudoApp.proxy.Pawn pawn, string playerName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/PawnHasFinish")]
        System.Threading.Tasks.Task PawnHasFinishAsync(LudoApp.proxy.Pawn pawn, string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/NotifyForWinner", ReplyAction="http://tempuri.org/IGame/NotifyForWinnerResponse")]
        void NotifyForWinner(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/NotifyForWinner", ReplyAction="http://tempuri.org/IGame/NotifyForWinnerResponse")]
        System.Threading.Tasks.Task NotifyForWinnerAsync(string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/setTurn", ReplyAction="http://tempuri.org/IGame/setTurnResponse")]
        void setTurn();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/setTurn", ReplyAction="http://tempuri.org/IGame/setTurnResponse")]
        System.Threading.Tasks.Task setTurnAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/getTurn", ReplyAction="http://tempuri.org/IGame/getTurnResponse")]
        bool getTurn(string player, LudoApp.proxy.Pawn pawn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/getTurn", ReplyAction="http://tempuri.org/IGame/getTurnResponse")]
        System.Threading.Tasks.Task<bool> getTurnAsync(string player, LudoApp.proxy.Pawn pawn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/diceTurn", ReplyAction="http://tempuri.org/IGame/diceTurnResponse")]
        bool diceTurn(string player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/diceTurn", ReplyAction="http://tempuri.org/IGame/diceTurnResponse")]
        System.Threading.Tasks.Task<bool> diceTurnAsync(string player);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/NewPlayerConnected")]
        void NewPlayerConnected(LudoApp.proxy.Player[] players);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/NewWinner", ReplyAction="http://tempuri.org/IGame/NewWinnerResponse")]
        void NewWinner(string username);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/MessageRecieved")]
        void MessageRecieved(string msg, string playerName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/DiceNotify", ReplyAction="http://tempuri.org/IGame/DiceNotifyResponse")]
        void DiceNotify(int result, string playerName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/PawnNotify")]
        void PawnNotify(LudoApp.proxy.Pawn p, int newPosition);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGame/GamePaused", ReplyAction="http://tempuri.org/IGame/GamePausedResponse")]
        void GamePaused(bool b);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IGame/RespawNotify")]
        void RespawNotify(LudoApp.proxy.Pawn p);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGameChannel : LudoApp.proxy.IGame, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GameClient : System.ServiceModel.DuplexClientBase<LudoApp.proxy.IGame>, LudoApp.proxy.IGame {
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public GameClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public LudoApp.proxy.Player[] Connect(string username, int nbOfPoints, int Position, int priority) {
            return base.Channel.Connect(username, nbOfPoints, Position, priority);
        }
        
        public System.Threading.Tasks.Task<LudoApp.proxy.Player[]> ConnectAsync(string username, int nbOfPoints, int Position, int priority) {
            return base.Channel.ConnectAsync(username, nbOfPoints, Position, priority);
        }
        
        public void Disconnect() {
            base.Channel.Disconnect();
        }
        
        public System.Threading.Tasks.Task DisconnectAsync() {
            return base.Channel.DisconnectAsync();
        }
        
        public void CreatePlayer(string username, int nbOfPoints, int position, int priority) {
            base.Channel.CreatePlayer(username, nbOfPoints, position, priority);
        }
        
        public System.Threading.Tasks.Task CreatePlayerAsync(string username, int nbOfPoints, int position, int priority) {
            return base.Channel.CreatePlayerAsync(username, nbOfPoints, position, priority);
        }
        
        public void RemovePlayer(string playerName) {
            base.Channel.RemovePlayer(playerName);
        }
        
        public System.Threading.Tasks.Task RemovePlayerAsync(string playerName) {
            return base.Channel.RemovePlayerAsync(playerName);
        }
        
        public LudoApp.proxy.Player[] GetPlayers() {
            return base.Channel.GetPlayers();
        }
        
        public System.Threading.Tasks.Task<LudoApp.proxy.Player[]> GetPlayersAsync() {
            return base.Channel.GetPlayersAsync();
        }
        
        public string GetPlayerInfo(string playerName) {
            return base.Channel.GetPlayerInfo(playerName);
        }
        
        public System.Threading.Tasks.Task<string> GetPlayerInfoAsync(string playerName) {
            return base.Channel.GetPlayerInfoAsync(playerName);
        }
        
        public int ThrowDice(string playerName) {
            return base.Channel.ThrowDice(playerName);
        }
        
        public System.Threading.Tasks.Task<int> ThrowDiceAsync(string playerName) {
            return base.Channel.ThrowDiceAsync(playerName);
        }
        
        public void MoveForward(LudoApp.proxy.Pawn p, int newPosition) {
            base.Channel.MoveForward(p, newPosition);
        }
        
        public System.Threading.Tasks.Task MoveForwardAsync(LudoApp.proxy.Pawn p, int newPosition) {
            return base.Channel.MoveForwardAsync(p, newPosition);
        }
        
        public void SendMessage(string msg, string playerName) {
            base.Channel.SendMessage(msg, playerName);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string msg, string playerName) {
            return base.Channel.SendMessageAsync(msg, playerName);
        }
        
        public void GamePause(bool b) {
            base.Channel.GamePause(b);
        }
        
        public System.Threading.Tasks.Task GamePauseAsync(bool b) {
            return base.Channel.GamePauseAsync(b);
        }
        
        public void ResetPawn(LudoApp.proxy.Pawn p) {
            base.Channel.ResetPawn(p);
        }
        
        public System.Threading.Tasks.Task ResetPawnAsync(LudoApp.proxy.Pawn p) {
            return base.Channel.ResetPawnAsync(p);
        }
        
        public bool AllFinish(string playerName) {
            return base.Channel.AllFinish(playerName);
        }
        
        public System.Threading.Tasks.Task<bool> AllFinishAsync(string playerName) {
            return base.Channel.AllFinishAsync(playerName);
        }
        
        public void PawnHasFinish(LudoApp.proxy.Pawn pawn, string playerName) {
            base.Channel.PawnHasFinish(pawn, playerName);
        }
        
        public System.Threading.Tasks.Task PawnHasFinishAsync(LudoApp.proxy.Pawn pawn, string playerName) {
            return base.Channel.PawnHasFinishAsync(pawn, playerName);
        }
        
        public void NotifyForWinner(string playerName) {
            base.Channel.NotifyForWinner(playerName);
        }
        
        public System.Threading.Tasks.Task NotifyForWinnerAsync(string playerName) {
            return base.Channel.NotifyForWinnerAsync(playerName);
        }
        
        public void setTurn() {
            base.Channel.setTurn();
        }
        
        public System.Threading.Tasks.Task setTurnAsync() {
            return base.Channel.setTurnAsync();
        }
        
        public bool getTurn(string player, LudoApp.proxy.Pawn pawn) {
            return base.Channel.getTurn(player, pawn);
        }
        
        public System.Threading.Tasks.Task<bool> getTurnAsync(string player, LudoApp.proxy.Pawn pawn) {
            return base.Channel.getTurnAsync(player, pawn);
        }
        
        public bool diceTurn(string player) {
            return base.Channel.diceTurn(player);
        }
        
        public System.Threading.Tasks.Task<bool> diceTurnAsync(string player) {
            return base.Channel.diceTurnAsync(player);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="proxy.IAccount")]
    public interface IAccount {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/LogIn", ReplyAction="http://tempuri.org/IAccount/LogInResponse")]
        string LogIn(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/LogIn", ReplyAction="http://tempuri.org/IAccount/LogInResponse")]
        System.Threading.Tasks.Task<string> LogInAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/createAccount", ReplyAction="http://tempuri.org/IAccount/createAccountResponse")]
        bool createAccount(string name, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/createAccount", ReplyAction="http://tempuri.org/IAccount/createAccountResponse")]
        System.Threading.Tasks.Task<bool> createAccountAsync(string name, string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/getRanking", ReplyAction="http://tempuri.org/IAccount/getRankingResponse")]
        string[] getRanking();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/getRanking", ReplyAction="http://tempuri.org/IAccount/getRankingResponse")]
        System.Threading.Tasks.Task<string[]> getRankingAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/AwardWinner", ReplyAction="http://tempuri.org/IAccount/AwardWinnerResponse")]
        bool AwardWinner(string userName, int points);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/AwardWinner", ReplyAction="http://tempuri.org/IAccount/AwardWinnerResponse")]
        System.Threading.Tasks.Task<bool> AwardWinnerAsync(string userName, int points);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/getPlayers", ReplyAction="http://tempuri.org/IAccount/getPlayersResponse")]
        string[] getPlayers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAccount/getPlayers", ReplyAction="http://tempuri.org/IAccount/getPlayersResponse")]
        System.Threading.Tasks.Task<string[]> getPlayersAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAccountChannel : LudoApp.proxy.IAccount, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AccountClient : System.ServiceModel.ClientBase<LudoApp.proxy.IAccount>, LudoApp.proxy.IAccount {
        
        public AccountClient() {
        }
        
        public AccountClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AccountClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AccountClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string LogIn(string username, string password) {
            return base.Channel.LogIn(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LogInAsync(string username, string password) {
            return base.Channel.LogInAsync(username, password);
        }
        
        public bool createAccount(string name, string username, string password) {
            return base.Channel.createAccount(name, username, password);
        }
        
        public System.Threading.Tasks.Task<bool> createAccountAsync(string name, string username, string password) {
            return base.Channel.createAccountAsync(name, username, password);
        }
        
        public string[] getRanking() {
            return base.Channel.getRanking();
        }
        
        public System.Threading.Tasks.Task<string[]> getRankingAsync() {
            return base.Channel.getRankingAsync();
        }
        
        public bool AwardWinner(string userName, int points) {
            return base.Channel.AwardWinner(userName, points);
        }
        
        public System.Threading.Tasks.Task<bool> AwardWinnerAsync(string userName, int points) {
            return base.Channel.AwardWinnerAsync(userName, points);
        }
        
        public string[] getPlayers() {
            return base.Channel.getPlayers();
        }
        
        public System.Threading.Tasks.Task<string[]> getPlayersAsync() {
            return base.Channel.getPlayersAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="proxy.ILobby", CallbackContract=typeof(LudoApp.proxy.ILobbyCallback))]
    public interface ILobby {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobby/InvitePlayers", ReplyAction="http://tempuri.org/ILobby/InvitePlayersResponse")]
        void InvitePlayers(string player2, string player3, string player4);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobby/InvitePlayers", ReplyAction="http://tempuri.org/ILobby/InvitePlayersResponse")]
        System.Threading.Tasks.Task InvitePlayersAsync(string player2, string player3, string player4);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILobby/InviteToPlay", ReplyAction="http://tempuri.org/ILobby/InviteToPlayResponse")]
        void InviteToPlay(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILobbyChannel : LudoApp.proxy.ILobby, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LobbyClient : System.ServiceModel.DuplexClientBase<LudoApp.proxy.ILobby>, LudoApp.proxy.ILobby {
        
        public LobbyClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public LobbyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public LobbyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public LobbyClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void InvitePlayers(string player2, string player3, string player4) {
            base.Channel.InvitePlayers(player2, player3, player4);
        }
        
        public System.Threading.Tasks.Task InvitePlayersAsync(string player2, string player3, string player4) {
            return base.Channel.InvitePlayersAsync(player2, player3, player4);
        }
    }
}
